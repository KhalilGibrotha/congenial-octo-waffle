# ==============================================================================
# Python Environment Module for RHEL WSL Setup
# ==============================================================================

function Set-PythonEnvironment {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]$DistributionName,
        
        [Parameter(Mandatory = $true)]
        [hashtable]$Config
    )
    
    Write-Log -Message "Setting up Python environment for: $DistributionName" -Level INFO
    
    try {
        # Install Python and related packages
        Write-Host "Installing Python packages..." -ForegroundColor Cyan
        $packagesString = $Config.StandardPackages -join " "
        $installResult = wsl -d $DistributionName --exec bash -c "dnf install -y python3 python3-pip python3-virtualenv $packagesString" 2>&1
        
        if ($LASTEXITCODE -ne 0) {
            Write-Log -Message "Python package installation had issues: $installResult" -Level WARN
        } else {
            Write-Log -Message "Python packages installed successfully" -Level INFO
        }
        
        # Create virtual environment directory structure
        $venvParentDir = Split-Path $Config.VenvPath -Parent
        $createDirResult = wsl -d $DistributionName --exec bash -c "mkdir -p $venvParentDir" 2>&1
        
        if ($LASTEXITCODE -ne 0) {
            throw "Failed to create venv parent directory: $createDirResult"
        }
        
        # Create Python virtual environment
        Write-Host "Creating Python virtual environment..." -ForegroundColor Cyan
        $createVenvResult = wsl -d $DistributionName --exec bash -c "python3 -m venv $($Config.VenvPath)" 2>&1
        
        if ($LASTEXITCODE -ne 0) {
            throw "Failed to create virtual environment: $createVenvResult"
        }
        
        Write-Log -Message "Created Python virtual environment at: $($Config.VenvPath)" -Level INFO
        
        # Set ownership
        $chownResult = wsl -d $DistributionName --exec bash -c "chown -R $($Config.VenvOwner):$($Config.VenvGroup) $($Config.VenvPath)" 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Log -Message "Set venv ownership to $($Config.VenvOwner):$($Config.VenvGroup)" -Level INFO
        } else {
            Write-Log -Message "Failed to set venv ownership: $chownResult" -Level WARN
        }
        
        # Install custom wheel if configured
        if ($Config.CustomWheel.Enabled) {
            $wheelResult = Install-CustomWheel -DistributionName $DistributionName -Config $Config
            if (-not $wheelResult.Success) {
                Write-Log -Message "Custom wheel installation failed: $($wheelResult.Error)" -Level WARN
            }
        }
        
        # Create activation script for convenience
        $activationScript = @"
#!/bin/bash
# RHEL WSL Python Virtual Environment Activation Script
# Generated by RHEL WSL Setup Script

echo "Activating Python virtual environment..."
source $($Config.VenvPath)/bin/activate

echo "Python virtual environment activated!"
echo "Python version: \$(python --version)"
echo "Pip version: \$(pip --version)"
echo "Virtual environment path: $($Config.VenvPath)"

# Add any custom environment setup here
export VIRTUAL_ENV_NAME="rhel-wsl-custom"

echo "Environment setup complete. Type 'deactivate' to exit the virtual environment."
"@
        
        $scriptPath = "/home/$($Config.VenvOwner)/activate-venv.sh"
        $createScriptCmd = "cat > $scriptPath << 'EOF'`n$activationScript`nEOF"
        wsl -d $DistributionName --exec bash -c $createScriptCmd
        
        # Make script executable
        wsl -d $DistributionName --exec bash -c "chmod +x $scriptPath"
        wsl -d $DistributionName --exec bash -c "chown $($Config.VenvOwner):$($Config.VenvGroup) $scriptPath"
        
        Write-Log -Message "Created activation script: $scriptPath" -Level INFO
        
        # Test the virtual environment
        $testResult = Test-PythonEnvironment -DistributionName $DistributionName -Config $Config
        
        if ($testResult.Success) {
            Write-Host "Python environment setup completed successfully" -ForegroundColor Green
            Write-Log -Message "Python environment setup completed successfully" -Level INFO
            return @{ Success = $true; VenvPath = $Config.VenvPath; ActivationScript = $scriptPath }
        } else {
            throw "Python environment test failed: $($testResult.Error)"
        }
        
    } catch {
        Write-Host "Python environment setup failed: $_" -ForegroundColor Red
        Write-Log -Message "Python environment setup failed: $_" -Level ERROR
        return @{ Success = $false; Error = $_.Exception.Message }
    }
}

function Install-CustomWheel {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]$DistributionName,
        
        [Parameter(Mandatory = $true)]
        [hashtable]$Config
    )
    
    Write-Log -Message "Installing custom wheel package" -Level INFO
    
    try {
        # Check if Windows wheel file exists
        if (-not (Test-Path $Config.CustomWheel.WindowsPath)) {
            Write-Log -Message "Custom wheel file not found: $($Config.CustomWheel.WindowsPath)" -Level ERROR
            return @{ Success = $false; Error = "Wheel file not found" }
        }
        
        # Convert Windows path to WSL path
        $windowsPath = $Config.CustomWheel.WindowsPath
        $wslPath = $windowsPath -replace '^([A-Z]):', '/mnt/$1' -replace '\\', '/' | ForEach-Object { $_.ToLower() }
        
        Write-Host "Copying wheel file to WSL..." -ForegroundColor Cyan
        $copyResult = wsl -d $DistributionName --exec bash -c "cp '$wslPath' $($Config.CustomWheel.WSLTempPath)" 2>&1
        
        if ($LASTEXITCODE -ne 0) {
            throw "Failed to copy wheel file: $copyResult"
        }
        
        Write-Log -Message "Copied wheel file to WSL temp location" -Level INFO
        
        # Activate virtual environment and install wheel
        Write-Host "Installing custom wheel package..." -ForegroundColor Cyan
        $installCmd = "source $($Config.VenvPath)/bin/activate && pip install $($Config.CustomWheel.WSLTempPath)"
        $installResult = wsl -d $DistributionName --exec bash -c $installCmd 2>&1
        
        if ($LASTEXITCODE -ne 0) {
            throw "Failed to install wheel: $installResult"
        }
        
        Write-Log -Message "Successfully installed custom wheel package" -Level INFO
        
        # Clean up temporary file
        if ($Config.CustomWheel.CleanupAfterInstall) {
            wsl -d $DistributionName --exec bash -c "rm -f $($Config.CustomWheel.WSLTempPath)" 2>$null
            Write-Log -Message "Cleaned up temporary wheel file" -Level INFO
        }
        
        # Verify installation
        $verifyCmd = "source $($Config.VenvPath)/bin/activate && pip list"
        $verifyResult = wsl -d $DistributionName --exec bash -c $verifyCmd 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "Custom wheel installation completed successfully" -ForegroundColor Green
            Write-Log -Message "Custom wheel installation verified" -Level INFO
            return @{ Success = $true; InstallOutput = $installResult; PackageList = $verifyResult }
        } else {
            throw "Installation verification failed: $verifyResult"
        }
        
    } catch {
        Write-Log -Message "Custom wheel installation failed: $_" -Level ERROR
        return @{ Success = $false; Error = $_.Exception.Message }
    }
}

function Test-PythonEnvironment {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]$DistributionName,
        
        [Parameter(Mandatory = $true)]
        [hashtable]$Config
    )
    
    Write-Log -Message "Testing Python environment" -Level INFO
    
    try {
        # Test virtual environment activation and basic functionality
        $testCommands = @(
            "test -d $($Config.VenvPath)",
            "test -f $($Config.VenvPath)/bin/activate",
            "source $($Config.VenvPath)/bin/activate && python --version",
            "source $($Config.VenvPath)/bin/activate && pip --version",
            "source $($Config.VenvPath)/bin/activate && pip list"
        )
        
        $allTestsPassed = $true
        $testResults = @()
        
        foreach ($cmd in $testCommands) {
            $result = wsl -d $DistributionName --exec bash -c $cmd 2>&1
            $success = $LASTEXITCODE -eq 0
            
            $testResults += [PSCustomObject]@{
                Command = $cmd
                Success = $success
                Output = $result
            }
            
            if (-not $success) {
                $allTestsPassed = $false
                Write-Log -Message "Python test failed - $cmd`: $result" -Level WARN
            } else {
                Write-Log -Message "Python test passed - $cmd" -Level INFO
            }
        }
        
        if ($allTestsPassed) {
            Write-Log -Message "All Python environment tests passed" -Level INFO
            return @{ Success = $true; TestResults = $testResults }
        } else {
            Write-Log -Message "Some Python environment tests failed" -Level ERROR
            return @{ Success = $false; Error = "Test failures detected"; TestResults = $testResults }
        }
        
    } catch {
        Write-Log -Message "Error testing Python environment: $_" -Level ERROR
        return @{ Success = $false; Error = $_.Exception.Message }
    }
}

function Get-PythonEnvironmentInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]$DistributionName,
        
        [Parameter(Mandatory = $true)]
        [string]$VenvPath
    )
    
    try {
        $infoCommands = @{
            "PythonVersion" = "source $VenvPath/bin/activate && python --version"
            "PipVersion" = "source $VenvPath/bin/activate && pip --version"
            "InstalledPackages" = "source $VenvPath/bin/activate && pip list"
            "VenvLocation" = "echo $VenvPath"
        }
        
        $environmentInfo = @{}
        
        foreach ($key in $infoCommands.Keys) {
            $result = wsl -d $DistributionName --exec bash -c $infoCommands[$key] 2>&1
            $environmentInfo[$key] = if ($LASTEXITCODE -eq 0) { $result } else { "Error: $result" }
        }
        
        return $environmentInfo
        
    } catch {
        Write-Log -Message "Error getting Python environment info: $_" -Level ERROR
        return @{ Error = $_.Exception.Message }
    }
}

Export-ModuleMember -Function Set-PythonEnvironment, Install-CustomWheel, Test-PythonEnvironment, Get-PythonEnvironmentInfo
